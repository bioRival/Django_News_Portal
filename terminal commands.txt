cd NewsPaper
python manage.py shell
from news.models import *

# 1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).
user_sanderson = User.objects.create_user('sanderson')
user_martin = User.objects.create_user('martin')

# 2. Создать два объекта модели Author, связанные с пользователями.
sanderson = Author.objects.create(user=user_sanderson)
martin = Author.objects.create(user=user_martin)
sanderson.save()
martin.save()

# 3. Добавить 4 категории в модель Category.
tag_news = Category.objects.create(tag="News")
tag_fantasy = Category.objects.create(tag="Fantasy")
tag_gaming = Category.objects.create(tag="Gaming")
tag_scifi = Category.objects.create(tag="Sci-fi")

# 4. Добавить 2 статьи и 1 новость.
# 5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
news1 = Post.objects.create(author=martin, type='N', title="Update on Winds of Winter", content="Still writing it, approximately half of it is done, so maybe it will come out somewhere at the end of 2025. Chao!")
news1.category.add(tag_news, tag_fantasy)

art1 = Post.objects.create(author=sanderson, type='A', title="Bacon Born Limerick", content="Bacon ipsum dolor amet bresaola capicola tri-tip")
art1.category.add(tag_news, tag_scifi, tag_fantasy)

art2 = Post.objects.create(author=martin, type='A', title="Did you know...", content="Did you know I was working on the writing of the game called Elden Ring? Don't know a first thing about it, because I'm as old as world war, but it's probably something cool.")
art2.category.add(tag_news, tag_gaming, tag_fantasy)

# 6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
steve = User.objects.create_user('steve')
darklord = User.objects.create_user('darklord478')
matt = User.objects.create_user('matt_mercer')
monika = User.objects.create_user('m0nika')
bob = User.objects.create_user('bobafet69')

news1_comment1 = Comment.objects.create(post=news1, user=monika, content="He will probably die before he finishes it")
news1_comment2 = Comment.objects.create(post=news1, user=darklord, content="can't wait!")
news1_comment3 = Comment.objects.create(post=news1, user=user_martin, content="I'm in good health, you know")
news1_comment4 = Comment.objects.create(post=news1, user=monika, content="aaaa, I did't know you reads these... sorry")

art1_comment1 = Comment.objects.create(post=art1, user=matt, content="Roll D10 inspiration die")
art1_comment2 = Comment.objects.create(post=art1, user=steve, content="Why reading it makes me so hungry..?")
art1_comment3 = Comment.objects.create(post=art1, user=monika, content="Beautiful")

art2_comment1 = Comment.objects.create(post=art2, user=steve, content="whoa")
art2_comment2 = Comment.objects.create(post=art2, user=bob, content="everybody knew that, steve")
art2_comment3 = Comment.objects.create(post=art2, user=steve, content="NO WAY1")

#7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
news1_comment1.like()
news1_comment1.dislike()
news1_comment1.like()
news1_comment1.save()

news1_comment2.like()
news1_comment2.save()

news1_comment3.like()
news1_comment3.like()
news1_comment3.like()
news1_comment3.save()

news1_comment4.like()
news1_comment4.save()

art1_comment1.like()
art1_comment1.save()

art1_comment3.like()
art1_comment3.save()

art2_comment1.dislike()
art2_comment1.dislike()
art2_comment1.save()

art2_comment2.like()
art2_comment2.like()
art2_comment2.save()

art2_comment3.like()
art2_comment3.save()

# 8. Обновить рейтинги пользователей.
news1.rating = 12
art1.rating = 33
art2.rating = 4
news1.save()
art1.save()
art2.save()

sanderson.update_rating()
martin.update_rating()
sanderson.save()
martin.save()

# 9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
best_author = Author.objects.all().order_by("-rating")[0]
print(f"Best author goes by username: {best_author.user.username}, with the score of {best_author.rating}")

# 10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
martins_best_post = Post.objects.filter(author=martin).order_by("-rating")[0]
print(f"Author who goes by username: {martin.user.username} was registered at {martin.user.date_joined.date()}, has rating of {martin.rating} and his best work is called {martins_best_post.title}, and it starts like this: {martins_best_post.preview()}")

# 11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
m_b_p_comments = Comment.objects.filter(post=martins_best_post).order_by("-comment_date").values("comment_date", "user__username", "rating", "content")
for comment in m_b_p_comments: print(f'\n\n{comment["comment_date"]}  {comment["user__username"]} [rated: {comment["rating"]}]:\n{comment["content"]}')